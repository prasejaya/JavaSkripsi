/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package skripsi;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Have
 */
public class Menu2 extends javax.swing.JFrame {
    String line;
    List<String[]> listdata = new ArrayList<>();    
    List<String[]> listdatafuzzy = new ArrayList<>();
    private double age,kelas,direct_bilirubin, albumin, albumin_globulin_ratio, total_protiens, total_bilirubin, alamine_aminotransferase, aspartate_aminotransferase, alkaline_phosphotase;
    private String gender;
    double totalpi,totalni,anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,tbnormalpositif,
                  tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,dbnormalpositif,dbnormalnegatif,
                  dbabnormalpositif,dbabnormalnegatif,apnormalpositif,apnormalnegatif,apabnormalnegatif,apabnormalpositif,
                  aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,asnormalpositif,asnormalnegatif,
                  asabnormalpositif,asabnormalnegatif,tprendahpositif,tprendahnegatif,
                  tpnormalnegatif,tpnormalpositif,tptinggipositif,tptingginegatif,
                  abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,
                  abtingginegatif,agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif;
     double entropyklas,entropyanak,entropymuda,entropydewasa,entropytbnormal,entropytbabnormal,
                  entropydbnormal,entropydbabnormal,entropyapnormal,entropyapabnormal,entropyaanormal,entropyaaabnormal,
                  entropyasnormal,entropyasabnormal,entropytprendah,entropytpnormal,entropytptinggi,entropyabrendah,
                  entropyabnormal,entropyabtinggi,entropyabgnormal,entropyabgabnormal;
     double gainage,gaintb,gaindb,gainap,gainaa,gainas,gaintp,gainab,gainabg;
     double number1,number2,number3,number4,number5,number6,number7,number8,number9,number10,number11,number12,number13,number14,number15,number16,jumlahnumber,ln,rn;
     double c1positif,c1negatif,ctotal,ctotal1,ctotal2,c2positif,c2negatif,c3positif,c3negatif,cmembership1,cmembership2,cmembership3,cmembership4,cmembership5,cmembership6;
     Fuzzy c = new Fuzzy();

    /**
     * Creates new form Menu2
     */
    public Menu2() {
        initComponents();
       jButton3.setVisible(false);
       jButton4.setVisible(false);
       jButton5.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jButton2.setText("Hitung Fuzzy");
        jButton2.setActionCommand("Lihat Hasil Prediksi");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hitung Gain & Entropy");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Buat Rule & Update Prediksi");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Tentukan Fold");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(34, 34, 34)
                .addComponent(jButton5)
                .addContainerGap(170, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       fuzzyTraining();
       JOptionPane.showMessageDialog(null, "Proses Penghitungan Fuzzy Selesai. Silahkan Hitung Gain dan Entropy");
      jButton3.setVisible(true);
      jButton2.setVisible(false);
       //jButton3.setOpaque(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        entropy();
        JOptionPane.showMessageDialog(null, "Proses Penghitungan Gain dan Entropy Selesai. Silahkan Lihat Node");
         jButton4.setVisible(true); 
         jButton3.setVisible(false); 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
//        fuzzyTesting();
//        updateTesting();
//        //rule();
//        hitungakurasiperfoldTesting();
        //JOptionPane.showMessageDialog(null, "Proses Program Telah Selesai");
        
        this.setVisible(false);
        MenuFold page=new MenuFold();
        page.setBounds(400, 400, 600, 600);
        page.setVisible(true); 
    }//GEN-LAST:event_jButton5ActionPerformed
   
    public Integer numProses(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer number;
        number = 0;
         try{
            String sql = "select max(prosespenelitian) as number from prosesfold";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              number = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(number);
         return number;
    }
    
    public Integer JumData(Integer i){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer number;
        number = 0;
         try{
            String sql = "select distinct count(idprosesfold) as number from temp"+i+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              number = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(number);
         return number;
    }
    
    public Integer tetanProses(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        int tetan;
        tetan = 0;
        double tetan2,ctetan,ctetan2,ctetan3;
        ctetan2 = 0;
         Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
         try{
            String sql = "select `value` as tetan from result where keytable = 'tetan' and prosespenelitian = "+number+""; 
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              tetan = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(tetan);
         return tetan;
    }
    
    public Integer tetarProses(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer tetar;
        tetar = 0;
         Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
         try{
            String sql = "select `value` as tetar from result where keytable = 'tetar' and prosespenelitian= "+number+""; 
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              tetar = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(tetar);
         return tetar;
    }
    
    public Integer yite(Integer i){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer tetar;
        tetar = 0;
         Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
         try{
            String sql = "select `value` as tetar from result where keytable = 'tetar' and prosespenelitian= "+number+""; 
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              tetar = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(tetar);
         return tetar;
    }
    
    public Integer nite(Integer i){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer tetar;
        tetar = 0;
         Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
         try{
            String sql = "select `value` as tetar from result where keytable = 'tetar' and prosespenelitian= "+number+""; 
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              tetar = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(tetar);
         return tetar;
    }
    
     public Integer foldTesting(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        Integer fold;
        fold = 0;
         Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
         try{
            String sql = "SELECT distinct fold from prosesfold where `status` = 'Testing' and prosespenelitian= "+number+""; 
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
              fold = Integer.parseInt(res.getString(1));
            }
       }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         System.out.println(fold);
         return fold;
    }
    
//    public Integer dataMentah(String label1){
//        java.sql.Connection conn=(Connection)Koneksi.configDB();
//        int val;
//        val = 0;
//         try{
//            String sql = "select distinct count(idprosesfold) as valbahan from "+label1+""; 
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//            while(res.next()){ 
//              val = Integer.parseInt(res.getString(1));
//            }
//       }catch (Exception e) {
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//         return val;
//    }
    
    
    private void exportRule(){
        Connection connect = null;
        Statement s = null;

        try {
        Class.forName("com.mysql.jdbc.Driver");
        connect =  DriverManager.getConnection("jdbc:mysql://localhost/liver" +
        "?user=root&password=");
        s = connect.createStatement();
        String sql = "SELECT * FROM  result where type like '%Node %' ";
        System.out.println(sql);
        ResultSet rec = s.executeQuery(sql);
        //tolong ganti sesuai selera
        String path = "E:\\Andro\\Skripsi\\Rule.txt";
        FileWriter writer;
        try {
        File file = new File(path);
        writer = new FileWriter(file, true);  //True = Append to file, false = Overwrite
        while((rec!=null) && (rec.next()))
        {
        writer.write(rec.getString("keytable"));        
        writer.write("Pada proses ke ");        
        writer.write(rec.getString("prosespenelitian"));

        writer.write("\r\n");
        }
        writer.close();
      
        } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
        } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
        // Close
        try {
        if(connect != null){
        s.close();
        connect.close();
        }
        } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }

    }
    
    private void exportAkurasi(){
         Connection connect = null;
        Statement s = null;
        Integer number;
        number = numProses();
        try {
        Class.forName("com.mysql.jdbc.Driver");
        connect =  DriverManager.getConnection("jdbc:mysql://localhost/liver" +
        "?user=root&password=");
        s = connect.createStatement();
        String sql = "SELECT * FROM  result where type = 'Akurasi' order by `value` desc";
        System.out.println(sql);
        ResultSet rec = s.executeQuery(sql);
        //tolong ganti sesuai selera
        String path = "E:\\Andro\\Skripsi\\Akurasi.txt";
        FileWriter writer;
        try {
        File file = new File(path);
        writer = new FileWriter(file, true);  //True = Append to file, false = Overwrite
        while((rec!=null) && (rec.next()))
        {
        writer.write(rec.getString("keytable"));
        writer.write(",");
        writer.write(rec.getString("value"));
        writer.write("Pada proses ke ");        
        writer.write(rec.getString("prosespenelitian"));
        writer.write("\r\n");
        }
        writer.close();
        System.out.println("Write success!");
        } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
        } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
        // Close
        try {
        if(connect != null){
        s.close();
        connect.close();
        }
        } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
    }
     private static void writeToFile(java.util.List list, String path) {
            BufferedWriter out = null;
            try {
                    File file = new File(path);
                    out = new BufferedWriter(new FileWriter(file, true));
                    for (Object s : list) {
                            out.write((char[]) s);
                            out.newLine();

                    }
                    out.close();
            } catch (IOException e) {
            }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:         
         nodeAwal();
//         nodeDua();
//         nodeTiga();
//         nodeEmpat();
//         nodeLima();
//         nodeEnam();
//         nodeTujuh();
//         nodeDelapan();
//         nodeSembilan();
         updatePrediksi();
         hitungakurasiperfoldTraining();
         exportRule();
         exportAkurasi();
          JOptionPane.showMessageDialog(null, "Silahkan Buka File Akurasi.txt dan Node.txt");
          jButton4.setVisible(false);
           jButton5.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
    
    public void updatePrediksi(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
        try {
           String sql ="UPDATE prosesfold SET prediksi = '1' WHERE ( select keytable from result where `type` = 'Prediksi 1') and status = 'Testing' ";
            java.sql.PreparedStatement pst=conn.prepareStatement(sql);
            pst.execute();
            System.out.println(sql);
            String sql1 ="UPDATE prosesfold SET prediksi = '2' WHERE ( select keytable from result where `type` = 'Prediksi 2') and status = 'Testing' ";
            java.sql.PreparedStatement pst1=conn.prepareStatement(sql1);
            pst1.execute();
            System.out.println(sql1);
            conn.close();
        } catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
//     private void hitungakurasiperfoldTesting(){
//        java.sql.Connection conn=(Connection)Koneksi.configDB();
//        Integer number;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          try {
//            String sql = "select distinct(fold) as fold from prosesfold where status = 'Testing' and prosespenelitian = "+number+"";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//            
//            while(res.next()){ 
//               akurasi(conn, Integer.parseInt(res.getString(1)));
//            }
//            
//        } catch (Exception e) {
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
     private void hitungakurasiperfoldTraining(){
        java.sql.Connection conn=(Connection)Koneksi.configDB();
          try {
           Integer kelas,prediksi;
            Float tp,tn,fp,fn,akurasidata,jumlah1,jumlah2;
            kelas = 0;
            tp = null;
            tn = null;
            fp = null;
            fn = null;
            jumlah1 = null;
            jumlah2 = null;
            prediksi = 0;
            Integer number,fold;
            Menu2 nw = new Menu2();
            number = nw.numProses();
            if(number == 0){
                number = 1;
            }
            fold = foldTesting();
            String sql = "select sum(case when prediksi = '1' and dataset = '1' Then 1 end) TP, sum(case when prediksi = '1' and dataset = '2' Then 1 end) FN, sum(case when prediksi = '2' and dataset = '2' Then 1 end) TN, sum(case when prediksi = '2' and dataset = '1' Then 1 end) FP from prosesfold where fold ='"+fold+"' and prosepenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
                tp = Float.parseFloat(res.getString(1));
                fn = Float.parseFloat(res.getString(2));
                tn = Float.parseFloat(res.getString(3));
                fp = Float.parseFloat(res.getString(4));
             jumlah1 = tp+tn;
             jumlah2 = tp+tn+fp+fn;
             akurasidata = (jumlah1/jumlah2) * 100;
             String sql1 = "Insert into result(type,keytable,`value`) values ('Akurasi','Proses Fold "+fold+"','"+akurasidata+"')";
             System.out.println(sql1);
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
            run.execute();
            }
        } catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     private void fuzzyTraining(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
         Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
         try {
            String sql = "select idprosesfold,age,total_bilirubin,direct_bilirubin,alkaline_phosphotase,alamine_aminotransferase,aspartate_aminotransferase,total_protiens,albumin,albumin_and_globulin_ratio from prosesfold where status = 'Training' and prosespenelitian = "+number+"";
            
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            Fuzzy c = new Fuzzy();
            while(res.next()){ 
                fuzzyAge(conn,Double.parseDouble(res.getString(2)),Integer.parseInt(res.getString(1)));
                fuzzyTotalBilirubin(conn,Double.parseDouble(res.getString(3)),Integer.parseInt(res.getString(1)));
                fuzzyDirectBilirubin(conn,Double.parseDouble(res.getString(4)),Integer.parseInt(res.getString(1)));
                fuzzyAlkalinePhosphotase(conn,Double.parseDouble(res.getString(5)),Integer.parseInt(res.getString(1)));
                fuzzyAlamineAminotransferase(conn,Double.parseDouble(res.getString(6)),Integer.parseInt(res.getString(1)));
                fuzzyAspartateAminotransferase(conn,Double.parseDouble(res.getString(7)),Integer.parseInt(res.getString(1)));
                fuzzyTotalProtiens(conn,Double.parseDouble(res.getString(8)),Integer.parseInt(res.getString(1)));
                fuzzyAlbumin(conn,Double.parseDouble(res.getString(9)),Integer.parseInt(res.getString(1)));
                fuzzyAlbuminAndGlobulinRatio(conn,Double.parseDouble(res.getString(10)),Integer.parseInt(res.getString(1)));
            }
         }catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
         }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     private void fuzzyTesting(){
         double num1,num2,num3,num4,num5,num6,num7,num8,num9;
         Integer number;
          number = numProses();
         java.sql.Connection conn=(Connection)Koneksi.configDB();
         try {
            String sql = "select idprosesfold,age,total_bilirubin,direct_bilirubin,alkaline_phosphotase,alamine_aminotransferase,aspartate_aminotransferase,total_protiens,albumin,albumin_and_globulin_ratio from prosesfold where status = 'Testing' and prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            Fuzzy c = new Fuzzy();
            while(res.next()){ 
                fuzzyAge(conn,Float.parseFloat(res.getString(2)),Integer.parseInt(res.getString(1)));
                fuzzyTotalBilirubin(conn,Float.parseFloat(res.getString(3)),Integer.parseInt(res.getString(1)));
                fuzzyDirectBilirubin(conn,Float.parseFloat(res.getString(4)),Integer.parseInt(res.getString(1)));
                fuzzyAlkalinePhosphotase(conn,Float.parseFloat(res.getString(5)),Integer.parseInt(res.getString(1)));
                fuzzyAlamineAminotransferase(conn,Float.parseFloat(res.getString(6)),Integer.parseInt(res.getString(1)));
                fuzzyAspartateAminotransferase(conn,Float.parseFloat(res.getString(7)),Integer.parseInt(res.getString(1)));
                fuzzyTotalProtiens(conn,Float.parseFloat(res.getString(8)),Integer.parseInt(res.getString(1)));
                fuzzyAlbumin(conn,Float.parseFloat(res.getString(9)),Integer.parseInt(res.getString(1)));
                fuzzyAlbuminAndGlobulinRatio(conn,Float.parseFloat(res.getString(10)),Integer.parseInt(res.getString(1)));
               
            }
         }catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
         }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     private void fuzzyAge(Connection conn,double age,int id){
         double num1,num2,num3;
          try{
           double age1,age2,age3,x1,x2,x3;
            
            age1 = c.Fuzzy_BTB1(age, 15, 25);
            age2 = c.Fuzzy_BTB2(age, 15, 25, 45, 55);
            age3 = c.Fuzzy_BTB3(age, 45, 55);
            
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Anak','Age','Fuzzy','"+id+"','"+age1+"'),('Muda','Age','Fuzzy','"+id+"','"+age2+"'),('Dewasa','Age','Fuzzy','"+id+"','"+age3+"')";
            java.sql.PreparedStatement run=conn.prepareStatement(sql);
            System.out.println(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
     private void fuzzyTotalBilirubin(Connection conn,double total_bilirubin,int id){
          double num1,num2,num3;
          try{
           double tb1,tb2;
            tb1 = c.Fuzzy_BB1(total_bilirubin, 0.5, 1.5);
            tb2 = c.Fuzzy_BB2(total_bilirubin, 0.5, 1.5);
           
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Total Bilirubin','Fuzzy','"+id+"','"+tb1+"'),('Abnormal','Total Bilirubin','Fuzzy','"+id+"','"+tb2+"')";
           System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
     
     private void fuzzyDirectBilirubin(Connection conn,double direct_bilirubin,int id){
          try{
           double tb1,tb2;
            tb1 = c.Fuzzy_BB1(direct_bilirubin, 0.15, 0.25);
            tb2 = c.Fuzzy_BB2(direct_bilirubin, 0.15, 0.25);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Direct Bilirubin','Fuzzy','"+id+"','"+tb1+"'),('Abnormal','Direct Bilirubin','Fuzzy','"+id+"','"+tb2+"')";
           System.out.println(sql); 
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
     private void fuzzyAlkalinePhosphotase(Connection conn,double alkaline_phosphotase,int id){
          try{
           double ap1,ap2;
            ap1 = c.Fuzzy_TB1(alkaline_phosphotase, 25, 35,115,125);
            ap2 = c.Fuzzy_TB2(alkaline_phosphotase, 25, 35,115,125);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Alkaline Phosphotase','Fuzzy','"+id+"','"+ap1+"'),('Tinggi','Alkaline Phosphotase','Fuzzy','"+id+"','"+ap2+"')";
           System.out.println(sql); 
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
      private void fuzzyAlamineAminotransferase(Connection conn,double alamine_phosphotase,int id){
          try{
           double al1,al2;
            al1 = c.Fuzzy_BB1(alamine_phosphotase, 42,52);
            al2 = c.Fuzzy_BB2(alamine_phosphotase, 42, 52);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Alamine Aminotransferase','Fuzzy','"+id+"','"+al1+"'),('Abnormal','Alamine Aminotransferase','Fuzzy','"+id+"','"+al2+"')";
           System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
      private void fuzzyAspartateAminotransferase(Connection conn,double aspartate_aminotransferase,int id){
          try{
           double as1,as2;
            as1 = c.Fuzzy_BB1(aspartate_aminotransferase, 32, 42);
            as2 = c.Fuzzy_BB2(aspartate_aminotransferase, 32, 42);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Aspartate Aminotransferase','Fuzzy','"+id+"','"+as1+"'),('Abnormal','Aspartate Aminotransferase','Fuzzy','"+id+"','"+as2+"')";
           System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
      
     private void fuzzyTotalProtiens(Connection conn,double total_protiens,int id){
          try{
           double tp1,tp2,tp3;
            tp1 = c.Fuzzy_BTB1(total_protiens, 5.5, 6.5);
            tp2 = c.Fuzzy_BTB2(total_protiens, 5.5, 6.5,7.5,8.5);
            tp3 = c.Fuzzy_BTB3(total_protiens, 7.5,8.5);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Rendah','Total Protiens','Fuzzy','"+id+"','"+tp1+"'),('Normal','Total Protiens','Fuzzy','"+id+"','"+tp2+"'),('Tinggi','Total Protiens','Fuzzy','"+id+"','"+tp3+"')";
           System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
     private void fuzzyAlbumin(Connection conn,double albumin,int id){
          try{
           double ab1,ab2,ab3;
            ab1 = c.Fuzzy_BTB1(albumin, 2.9,3.9);
            ab2 = c.Fuzzy_BTB2(albumin, 2.9,3.9,4.3,5.3);
            ab3 = c.Fuzzy_BTB3(albumin, 4.3,5.3);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Rendah','Albumin','Fuzzy','"+id+"','"+ab1+"'),('Normal','Albumin','Fuzzy','"+id+"','"+ab2+"'),('Tinggi','Albumin','Fuzzy','"+id+"','"+ab3+"')";
           System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
      private void fuzzyAlbuminAndGlobulinRatio(Connection conn,double albumin_and_globulin_ratio,int id){
          try{
           double abg1,abg2;
            abg1 = c.Fuzzy_BB1(albumin_and_globulin_ratio, 0.5,1.5);
            abg2 = c.Fuzzy_BB2(albumin_and_globulin_ratio,0.5,1.5);
           String sql = "Insert into fuzzy(label,`key`,category,idprosesfold,`value`) values ('Normal','Albumin and Global Ratio','Fuzzy','"+id+"','"+abg1+"'),('Abnormal','Albumin and Global Ratio','Fuzzy','"+id+"','"+abg2+"')";
          System.out.println(sql);
           java.sql.PreparedStatement run=conn.prepareStatement(sql);
            run.execute();
       }catch (Exception e) {
        }
     }
     private void entropy(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
              totalpi = hitungEntropyAllPositif(conn,number);
              totalni = hitungEntropyAllNegatif(conn,number);
              anakpositif = hitungEntropyPositif(conn, "Anak", "Age",number);
              anaknegatif = hitungEntropyNegatif(conn, "Anak", "Age",number);
              mudapositif = hitungEntropyPositif(conn, "Muda", "Age",number);
              mudanegatif = hitungEntropyNegatif(conn, "Muda", "Age",number);
              dewasapositif = hitungEntropyPositif(conn, "Dewasa", "Age",number);
              dewasanegatif = hitungEntropyNegatif(conn, "Dewasa", "Age",number);
              tbnormalpositif = hitungEntropyPositif(conn, "Normal", "Total Bilirubin",number);
              tbnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Total Bilirubin",number);
              tbabnormalpositif = hitungEntropyPositif(conn, "Abnormal", "Total Bilirubin",number);
              tbabnormalnegatif = hitungEntropyNegatif(conn, "Abnormal", "Total Bilirubin",number);
              dbnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Direct Bilirubin",number);
              dbnormalpositif = hitungEntropyPositif(conn, "Normal", "Direct Bilirubin",number);
              dbabnormalnegatif = hitungEntropyNegatif(conn, "Abnormal", "Direct Bilirubin",number);
              dbabnormalpositif = hitungEntropyPositif(conn, "Abnormal", "Direct Bilirubin",number);
              apnormalpositif = hitungEntropyPositif(conn, "Normal", "Alkaline Phosphotase",number);
              apnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Alkaline Phosphotase",number);
              apabnormalnegatif = hitungEntropyNegatif(conn, "Tinggi", "Alkaline Phosphotase",number);
              apabnormalpositif = hitungEntropyPositif(conn, "Tinggi", "Alkaline Phosphotase",number);
              aanormalpositif = hitungEntropyPositif(conn, "Normal", "Alamine Aminotransferase",number);
              aanormalnegatif = hitungEntropyNegatif(conn, "Normal", "Alamine Aminotransferase",number);
              aaabnormalpositif = hitungEntropyPositif(conn, "Abnormal", "Alamine Aminotransferase",number);
              aaabnormalnegatif = hitungEntropyNegatif(conn, "Abnormal", "Alamine Aminotransferase",number);
              asnormalpositif = hitungEntropyPositif(conn, "Normal", "Aspartate Aminotransferase",number);
              asnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Aspartate Aminotransferase",number);
              asabnormalpositif = hitungEntropyPositif(conn, "Abnormal", "Aspartate Aminotransferase",number);
              asabnormalnegatif = hitungEntropyNegatif(conn, "Abnormal", "Aspartate Aminotransferase",number);
              tprendahpositif = hitungEntropyPositif(conn, "Rendah", "Total Protiens",number);
              tprendahnegatif = hitungEntropyNegatif(conn, "Rendah", "Total Protiens",number);
              tpnormalpositif = hitungEntropyPositif(conn, "Normal", "Total Protiens",number);
              tpnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Total Protiens",number);
              tptinggipositif = hitungEntropyPositif(conn, "Tinggi", "Total Protiens",number);
              tptingginegatif = hitungEntropyNegatif(conn, "Tinggi", "Total Protiens",number);
              abrendahpositif = hitungEntropyPositif(conn, "Rendah", "Albumin",number);
              abrendahnegatif = hitungEntropyNegatif(conn, "Rendah", "Albumin",number);
              abnormalpositif = hitungEntropyPositif(conn, "Normal", "Albumin",number);
              abnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Albumin",number);
              abtinggipositif = hitungEntropyPositif(conn, "Tinggi", "Albumin",number);
              abtingginegatif = hitungEntropyNegatif(conn, "Tinggi", "Albumin",number);
              agbnormalpositif = hitungEntropyPositif(conn, "Normal", "Albumin and Global Ratio",number);
              agbnormalnegatif = hitungEntropyNegatif(conn, "Normal", "Albumin and Global Ratio",number);
              agbabnormalpositif = hitungEntropyPositif(conn, "Abnormal", "Albumin and Global Ratio",number);
              agbabnormalnegatif = hitungEntropyNegatif(conn, "Abnormal", "Albumin and Global Ratio",number);
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
            String sql = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 0','Age','"+gainage+"',"+number+"),('Gain 0','Total Bilirubin','"+gaintb+"',"+number+"),"
                    + "('Gain 0','Direct Bilirubin','"+gaindb+"',"+number+"),('Gain 0','Alkaline Phosphotase','"+gainap+"',"+number+"),"
                    + "('Gain 0','Alamine Aminotransferase','"+gainaa+"',"+number+"),('Gain 0','Aspartate Aminotransferase','"+gainas+"',"+number+"),"
                    + "('Gain 0','Total Protiens','"+gaintp+"',"+number+"),('Gain 0','Albumin','"+gainab+"',"+number+"),('Gain 0','Albumin and Global','"+gainabg+"',"+number+")";
            java.sql.PreparedStatement pst=conn.prepareStatement(sql);
            System.out.println(sql);
            pst.execute();
        } catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     } 
     public void entropy1(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp1");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp1");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp1");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp1");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp1");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp1");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp1");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp1");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp1");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp1");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp1");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp1");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp1");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp1");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp1");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp1");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp1");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp1");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp1");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp1");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp1");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp1");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp1");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp1");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp1");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp1");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp1");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp1");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp1");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp1");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp1");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp1");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp1");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp1");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp1");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp1");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp1");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp1");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp1");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp1");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp1");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp1");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp1");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp1");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 1','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
      public void entropy2(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp2");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp2");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp2");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp2");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp2");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp2");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp2");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp2");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp2");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp2");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp2");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp2");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp2");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp2");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp2");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp2");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp2");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp2");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp2");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp2");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp2");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp2");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp2");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp2");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp2");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp2");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp2");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp2");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp2");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp2");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp2");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp2");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp2");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp2");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp2");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp2");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp2");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp2");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp2");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp2");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp2");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp2");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp2");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp2");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 2','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy3(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp3");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp3");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp3");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp3");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp3");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp3");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp3");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp3");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp3");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp3");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp3");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp3");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp3");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp3");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp3");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp3");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp3");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp3");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp3");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp3");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp3");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp3");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp3");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp3");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp3");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp3");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp3");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp3");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp3");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp3");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp3");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp3");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp3");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp3");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp3");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp3");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp3");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp3");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp3");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp3");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp3");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp3");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp3");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp3");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 3','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy4(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp4");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp4");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp4");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp4");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp4");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp4");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp4");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp4");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp4");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp4");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp4");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp4");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp4");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp4");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp4");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp4");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp4");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp4");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp4");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp4");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp4");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp4");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp4");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp4");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp4");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp4");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp4");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp4");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp4");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp4");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp4");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp4");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp4");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp4");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp4");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp4");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp4");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp4");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp4");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp4");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp4");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp4");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp4");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp4");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 4','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy5(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp5");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp5");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp5");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp5");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp5");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp5");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp5");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp5");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp5");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp5");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp5");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp5");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp5");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp5");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp5");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp5");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp5");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp5");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp5");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp5");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp5");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp5");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp5");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp5");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp5");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp5");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp5");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp5");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp5");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp5");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp5");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp5");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp5");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp5");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp5");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp5");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp5");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp5");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp5");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp5");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp5");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp5");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp5");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp5");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 5','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy6(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp6");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp6");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp6");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp6");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp6");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp6");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp6");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp6");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp6");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp6");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp6");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp6");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp6");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp6");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp6");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp6");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp6");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp6");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp6");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp6");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp6");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp6");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp6");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp6");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp6");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp6");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp6");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp6");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp6");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp6");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp6");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp6");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp6");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp6");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp6");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp6");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp6");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp6");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp6");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp6");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp6");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp6");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp6");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp6");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 6','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy7(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp7");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp7");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp7");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp7");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp7");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp7");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp7");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp7");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp7");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp7");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp7");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp7");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp7");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp7");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp7");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp7");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp7");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp7");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp7");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp7");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp7");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp7");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp7");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp7");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp7");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp7");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp7");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp7");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp7");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp7");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp7");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp7");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp7");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp7");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp7");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp7");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp7");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp7");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp7");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp7");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp7");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp7");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp7");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp7");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 7','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy8(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp8");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp8");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp8");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp8");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp8");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp8");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp8");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp8");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp8");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp8");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp8");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp8");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp8");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp8");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp8");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp8");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp8");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp8");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp8");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp8");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp8");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp8");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp8");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp8");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp8");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp8");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp8");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp8");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp8");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp8");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp8");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp8");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp8");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp8");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp8");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp8");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp8");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp8");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp8");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp8");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp8");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp8");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp8");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp8");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 8','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void entropy9(){
          java.sql.Connection conn=(Connection)Koneksi.configDB();
           Integer number;
          number = numProses();
          if(number == 0){
              number = 1;
          }
          try {
          totalpi = hitungEntropyAllPositifTemp(conn,number,"Temp9");
              totalni = hitungEntropyAllNegatifTemp(conn,number,"Temp9");
              anakpositif = hitungEntropyPositifTemp(conn, "Anak", "Age",number,"Temp9");
              anaknegatif = hitungEntropyNegatifTemp(conn, "Anak", "Age",number,"Temp9");
              mudapositif = hitungEntropyPositifTemp(conn, "Muda", "Age",number,"Temp9");
              mudanegatif = hitungEntropyNegatifTemp(conn, "Muda", "Age",number,"Temp9");
              dewasapositif = hitungEntropyPositifTemp(conn, "Dewasa", "Age",number,"Temp9");
              dewasanegatif = hitungEntropyNegatifTemp(conn, "Dewasa", "Age",number,"Temp9");
              tbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Bilirubin",number,"Temp9");
              tbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Bilirubin",number,"Temp9");
              tbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp9");
              tbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Total Bilirubin",number,"Temp9");
              dbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp9");
              dbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Direct Bilirubin",number,"Temp9");
              dbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp9");
              dbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Direct Bilirubin",number,"Temp9");
              apnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp9");
              apnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alkaline Phosphotase",number,"Temp9");
              apabnormalnegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp9");
              apabnormalpositif = hitungEntropyPositifTemp(conn, "Tinggi", "Alkaline Phosphotase",number,"Temp9");
              aanormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp9");
              aanormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Alamine Aminotransferase",number,"Temp9");
              aaabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp9");
              aaabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Alamine Aminotransferase",number,"Temp9");
              asnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp9");
              asnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Aspartate Aminotransferase",number,"Temp9");
              asabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp9");
              asabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Aspartate Aminotransferase",number,"Temp9");
              tprendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Total Protiens",number,"Temp9");
              tprendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Total Protiens",number,"Temp9");
              tpnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Total Protiens",number,"Temp9");
              tpnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Total Protiens",number,"Temp9");
              tptinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Total Protiens",number,"Temp9");
              tptingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Total Protiens",number,"Temp9");
              abrendahpositif = hitungEntropyPositifTemp(conn, "Rendah", "Albumin",number,"Temp9");
              abrendahnegatif = hitungEntropyNegatifTemp(conn, "Rendah", "Albumin",number,"Temp9");
              abnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin",number,"Temp9");
              abnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin",number,"Temp9");
              abtinggipositif = hitungEntropyPositifTemp(conn, "Tinggi", "Albumin",number,"Temp9");
              abtingginegatif = hitungEntropyNegatifTemp(conn, "Tinggi", "Albumin",number,"Temp9");
              agbnormalpositif = hitungEntropyPositifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp9");
              agbnormalnegatif = hitungEntropyNegatifTemp(conn, "Normal", "Albumin and Global Ratio",number,"Temp9");
              agbabnormalpositif = hitungEntropyPositifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp9");
              agbabnormalnegatif = hitungEntropyNegatifTemp(conn, "Abnormal", "Albumin and Global Ratio",number,"Temp9");
              
              entropyklas = rumusEntropy(totalpi,totalni);
              entropyanak = rumusEntropy(anakpositif,anaknegatif);
              entropymuda = rumusEntropy(mudapositif,mudanegatif);
              entropydewasa = rumusEntropy(dewasapositif,mudanegatif);
              entropytbnormal = rumusEntropy(tbnormalpositif,tbnormalnegatif);
              entropytbabnormal = rumusEntropy(tbabnormalpositif,tbabnormalnegatif);
              entropydbnormal = rumusEntropy(dbnormalpositif,dbnormalnegatif);
              entropydbabnormal = rumusEntropy(dbabnormalpositif,dbabnormalnegatif);
              entropyapnormal = rumusEntropy(apnormalpositif,apnormalnegatif);
              entropyapabnormal = rumusEntropy(apabnormalpositif,apabnormalnegatif);
              entropyaaabnormal = rumusEntropy(aaabnormalpositif,aaabnormalnegatif);
              entropyaanormal = rumusEntropy(aanormalpositif,aanormalnegatif);
              entropyasnormal = rumusEntropy(asnormalpositif,asnormalnegatif);
              entropyasabnormal = rumusEntropy(asabnormalpositif,asabnormalnegatif);
              entropytpnormal = rumusEntropy(tpnormalpositif,tpnormalnegatif);
              entropytprendah = rumusEntropy(tprendahpositif,tprendahnegatif);
              entropytptinggi = rumusEntropy(tptinggipositif,tptingginegatif);
              entropyabnormal = rumusEntropy(abnormalpositif,abnormalnegatif);
              entropyabrendah = rumusEntropy(abrendahpositif,abrendahnegatif);
              entropyabtinggi = rumusEntropy(abtinggipositif,abtingginegatif);
              entropyabgabnormal = rumusEntropy(agbnormalpositif,agbnormalnegatif);
              entropyabgnormal = rumusEntropy(agbabnormalpositif,agbabnormalnegatif);
              
              gainage= rumusGain1(anakpositif,anaknegatif,mudapositif,mudanegatif,dewasapositif,dewasanegatif,entropyklas,
                      entropyanak,entropymuda,entropydewasa);
              gaintb = rumusGain2(tbnormalpositif,tbnormalnegatif,tbabnormalpositif,tbabnormalnegatif,entropyklas,
                      entropytbnormal,entropytbabnormal);
              gaindb = rumusGain2(dbnormalpositif,dbnormalnegatif,dbabnormalpositif,dbabnormalnegatif,entropyklas,
                      entropydbnormal,entropydbabnormal);
              gainap = rumusGain2(apnormalpositif,apnormalnegatif,apabnormalpositif,apabnormalnegatif,entropyklas,
                      entropyapnormal,entropyapabnormal);
              gainaa = rumusGain2(aanormalpositif,aanormalnegatif,aaabnormalpositif,aaabnormalnegatif,entropyklas,
                      entropyaanormal,entropyaaabnormal);
              gainas = rumusGain2(asnormalpositif,asnormalnegatif,asabnormalpositif,asabnormalnegatif,entropyklas,
                      entropyasnormal,entropyasabnormal);
              gaintp =rumusGain1(tprendahpositif,tprendahnegatif,tpnormalpositif,tpnormalnegatif,tptinggipositif,tptingginegatif,entropyklas,
                      entropytprendah,entropytpnormal,entropytptinggi);
              gainab = rumusGain1(abrendahpositif,abrendahnegatif,abnormalpositif,abnormalnegatif,abtinggipositif,abtingginegatif,entropyklas,
                      entropyabrendah,entropyabnormal,entropyabtinggi);
              gainabg = rumusGain2(agbnormalpositif,agbnormalnegatif,agbabnormalpositif,agbabnormalnegatif,entropyklas,
                      entropyabgnormal,entropyabgabnormal);
           
            
                String sql1 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Age','"+gainage+"',"+number+")";
                java.sql.PreparedStatement pst2=conn.prepareStatement(sql1);
                 pst2.execute();
                String sql3 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Total Bilirubin','"+gaintb+"',"+number+")";
                java.sql.PreparedStatement pst3=conn.prepareStatement(sql3);
                 pst3.execute(); 
                String sql4 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Direct Bilirubin','"+gaindb+"',"+number+")";
                java.sql.PreparedStatement pst4=conn.prepareStatement(sql4);
                 pst4.execute(); 
                String sql5 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Alkaline Phosphotase','"+gainap+"',"+number+")";
                 java.sql.PreparedStatement pst5=conn.prepareStatement(sql5);
                 pst5.execute(); 
                String sql6 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Alamine Aminotransferase','"+gainaa+"',"+number+")";
                java.sql.PreparedStatement pst6=conn.prepareStatement(sql6);
                 pst6.execute(); 
                String sql7 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Aspartate Aminotransferase','"+gainas+"',"+number+")";
                java.sql.PreparedStatement pst7=conn.prepareStatement(sql7);
                 pst7.execute(); 
                String sql8 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Total Protiens','"+gaintp+"',"+number+")";
                java.sql.PreparedStatement pst8=conn.prepareStatement(sql8);
                 pst8.execute(); 
                String sql9 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Albumin','"+gainab+"',"+number+")";
                java.sql.PreparedStatement pst9=conn.prepareStatement(sql9);
                 pst9.execute(); 
                String sql10 =  "Insert into result(type,keytable,`value`,prosespenelitian) values ('Gain 9','Albumin and Global','"+gainabg+"',"+number+")";
                java.sql.PreparedStatement pst10=conn.prepareStatement(sql10);
                //System.out.println(sql);
                pst10.execute();
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public double nodenPositif(String label,Connection conn,String label1){
            String data;
            double num = 0;
            try {
            String sql = "select sum(`value`),p.dataset from fuzzy f join prosesfold p on p.idprosesfold = f.idprosesfold where f.label in ("+label+") and dataset = 1 and `key` in ("+label1+") and value <> 0 ";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               num = Double.parseDouble(res.getString(1));
            }
        } catch (Exception e) {
        }
//select sum(`value`),p.dataset from fuzzy f join prosesfold p on p.idprosesfold = f.idprosesfold where f.label in ('Abnormal','Muda','Dewasa','Anak') and dataset = 1 and `key` in ('Alamine Aminotransferase','Age') and value <> 0 
            return num;
     }
     public double nodenNegatif(String label,Connection conn,String label1){
            String data;
            double num = 0;
            try {
            String sql = "select sum(`value`),p.dataset from fuzzy f join prosesfold p on p.idprosesfold = f.idprosesfold where f.label in ("+label+") and dataset = 2 and `key` in ("+label1+") and value <> 0 ";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               num = Double.parseDouble(res.getString(1));
            }
        } catch (Exception e) {
        }
//select sum(`value`),p.dataset from fuzzy f join prosesfold p on p.idprosesfold = f.idprosesfold where f.label in ('Abnormal','Muda','Dewasa','Anak') and dataset = 1 and `key` in ('Alamine Aminotransferase','Age') and value <> 0 
            return num;
     }
     public double rumusEntropy(double pi, double ni ){
         double number = 0;
             //hitung[3][i] = -(hitung[1][i]/hitung[0][i])*(Math.log(hitung[1][i]/hitung[0][i])/Math.log(2))-(hitung[2][i]/hitung[0][i])*(Math.log(hitung[2][i]/hitung[0][i])/Math.log(2));
            number = -(pi/(ni+pi))*(Math.log(pi/(ni+pi))/Math.log(2.0))-((ni/(pi+ni))*(Math.log(ni/(pi+ni))/Math.log(2.0)));
            //BigDecimal _number = new BigDecimal(-(pi/(ni+pi))*(Math.log(pi/(ni+pi))/Math.log(2.0))-((ni/(pi+ni))*(Math.log(ni/(pi+ni))/Math.log(2.0))));
            //number = -(pi/(pi+ni))*Math.log(pi/(pi+ni))-((ni/(pi+ni)*Math.log(ni/ni+pi)));
         return number;
     }
     
     public double rumusGain1(double pi1, double ni1,double pi2, double ni2,double pi3, double ni3,double entropykelas,double entropy1,double entropy2,double entropy3 ){
         double gain = 0;
         double jumlahp1 = 0;
         double jumlahp2 =0;
         double jumlahp3 =0;
         double semua = 0;
          int bulat = 4;
          double x1 = 0;
        double angka1 = Math.pow(10, bulat);
         jumlahp1 = pi1+ni1;
         jumlahp2 = pi2+ni2;
         jumlahp3 = pi3+ni3;
         semua = pi1+ni1+pi2+ni2+pi3+ni3;
         gain = entropykelas-((jumlahp1/semua) *entropy1)-((jumlahp2/semua)*entropy2)-((jumlahp3/semua)*entropy3);
         //BigDecimal _gain = new BigDecimal(entropykelas-((jumlahp1/semua) *entropy1)-((jumlahp2/semua)*entropy2)-((jumlahp3/semua)*entropy3));
          x1 = Math.round(gain*angka1)/angka1;
         return x1;
     }
     public double rumusNodePositif(Connection conn, String label, String k){
          double positif = 0;
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          try {
            String sql = "SELECT `value` from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 1 and prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               positif = positif + Float.parseFloat(res.getString(1));
            }
        } catch (Exception e) {
        }
          return positif;
     }
     public double rumusNodeNegatif(Connection conn, String label, String k){
          double negatif = 0;
           double positif = 0;
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          try {
            String sql = "SELECT `value` from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 2 and prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               negatif = negatif + Float.parseFloat(res.getString(1));
            }
        } catch (Exception e) {
        }
          return negatif;
     }
     public double rumusGain2(double pi1, double ni1,double pi2, double ni2,double entropykelas,double entropy1,double entropy2 ){
         double gain = 0;
         double jumlahp1 = 0;
         double jumlahp2 =0;
         double semua = 0;
          int bulat = 4;
          double x1 = 0;
        double angka1 = Math.pow(10, bulat);
         jumlahp1 = pi1+ni1;
         jumlahp2 = pi2+ni2;
         semua = pi1+ni1+pi2+ni2;
         gain = entropykelas-((jumlahp1/semua) *entropy1)-((jumlahp2/semua)*entropy2); 
          x1 = Math.round(gain*angka1)/angka1;
         return x1;
     }
     
     public static double log2(double n){
         return (Math.log(n) / Math.log(2.0));
     }
     private double hitungEntropyNegatif(Connection conn, String label, String k, Integer number){
         double negatif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 2 and p.prosespenelitian = "+number+"";
           
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               negatif = Float.parseFloat(res.getString(1));
            }
        } catch (Exception e) {
        }
          return negatif;
     }
     
     private double hitungEntropyAllNegatif(Connection conn, Integer number){
         double negatif = 0;
         
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where p.dataset = 2 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               negatif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return negatif;
     }
     
      private double hitungEntropyAllPositif(Connection conn, Integer number){
         double positif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where p.dataset = 1 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
               //BigDecimal _positif = new BigDecimal(Float.parseFloat(res.getString(1)));
               positif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return positif;
     }
     
     private double hitungEntropyPositif(Connection conn, String label, String k, Integer number){
         double positif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join prosesfold p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 1 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            
            while(res.next()){ 
                positif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return positif;
     }
     
     private double hitungEntropyNegatifTemp(Connection conn, String label, String k, Integer number, String a){
         double negatif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join "+ a +" p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 2 and p.prosespenelitian = "+number+"";
           
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               negatif = Float.parseFloat(res.getString(1));
            }
        } catch (Exception e) {
        }
          return negatif;
     }
     
     private double hitungEntropyAllNegatifTemp(Connection conn, Integer number, String a){
         double negatif = 0;
         
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join "+ a +" p on f.idprosesfold = p.idprosesfold where p.dataset = 2 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){ 
               negatif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return negatif;
     }
     
      private double hitungEntropyAllPositifTemp(Connection conn, Integer number, String a){
         double positif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join "+ a +" p on f.idprosesfold = p.idprosesfold where p.dataset = 1 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
               //BigDecimal _positif = new BigDecimal(Float.parseFloat(res.getString(1)));
               positif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return positif;
     }
     
     private double hitungEntropyPositifTemp(Connection conn, String label, String k, Integer number, String a){
         double positif = 0;
          try {
            String sql = "SELECT sum(`value`) from fuzzy f join "+ a +" p on f.idprosesfold = p.idprosesfold where label = '"+label+"' and `key` = '"+k+"' and p.dataset = 1 and p.prosespenelitian = "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            
            while(res.next()){ 
                positif = Float.parseFloat(res.getString(1));
            }
            
        } catch (Exception e) {
        }
          return positif;
     }
     
     private double hitungc(Connection conn, String label1,String label2, String label3){
          Integer number;
          double angka2 = 0;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
         try {
             String sql = " select sum(`value`) from "+label3+" f " +
                         " join prosesfold p on p.idprosesfold = f.idprosesfold " +
                         " where p.dataset = 1 and f.`key` = '"+label1+"' and f.label = '"+label2+"' and f.`value` <> 0 and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            System.out.println(sql);
            while(res.next()){
                angka2 = Double.parseDouble(res.getString(1));
            }
         }catch (Exception e) {
              
        }
         return angka2;
     }
     
     private double hitungcn(Connection conn, String label1,String label2, String label3){
          Integer number;
          double angka2 = 0;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
         try {
             String sql = " select sum(`value`) from "+label3+" f " +
                         " join prosesfold p on p.idprosesfold = f.idprosesfold " +
                         " where p.dataset = 2 and f.`key` = '"+label1+"' and f.label = '"+label2+"' and f.`value` <> 0 and prosespenelitian= "+number+"";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
                angka2 = Double.parseDouble(res.getString(1));
            }
         }catch (Exception e) {
              
        }
         return angka2;
     }
     private void nodeAwal(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number,tetan,val;
          double ctetan1,ctetan,val1;
          int a = 0;
          int b = 1;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
         try {
             System.out.println("jangkrik");
             int i = 0;
             do {
            String sql = "select * from result where type = 'Gain '"+a+" and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
           System.out.println(sql);
           System.exit(0);
            while(res.next()){
                if(i== 0){
                 String sql1 = "Insert into temp1 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==1){
                    String sql1 = "Insert into temp2 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==2){
                    String sql1 = "Insert into temp3 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==3){
                    String sql1 = "Insert into temp4 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==4){
                    String sql1 = "Insert into temp5 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==5){
                    String sql1 = "Insert into temp6 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==6){
                    String sql1 = "Insert into temp7 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==7){
                    String sql1 = "Insert into temp8 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }else if (i==8){
                    String sql1 = "Insert into temp9 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
                    java.sql.PreparedStatement run=conn.prepareStatement(sql1);
                    System.out.println(sql1);
                    run.execute();
                }
                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node 0','"+res.getString(3)+","+0+"','0.5',"+number+")";
                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
                pst.execute();
                 val = JumData(b);
                tetan = tetanProses();
                ctetan = tetan/100;
                ctetan1 = val * ctetan;
                val1 = val / 10;
                if(val1 > ctetan1) {
                if(res.getString(3) == "Alamine Aminotransferase" || res.getString(3) == "Direct Bilirubin" || res.getString(3) == "Albumin and Globulin Ratio " || res.getString(3)=="Aspartate Aminotransferase"){
                c1positif = hitungc(conn,res.getString(3),"Abnormal","Temp1");
                c1negatif = hitungcn(conn,res.getString(3),"Abnormal","Temp1");
                ctotal1 = c1positif + c1negatif;
                cmembership1 = (c1positif / ctotal1) * 100;
                cmembership2 = (c1negatif / ctotal1) * 100;
                c2positif = hitungc(conn,res.getString(3),"Normal","Temp1");
                c2negatif = hitungcn(conn,res.getString(3),"Normal","Temp1");
                ctotal2 = c2positif + c2negatif;
                cmembership3 = (c2positif / ctotal2) * 100;
                cmembership4 = (c2negatif / ctotal1) * 100;
                }else if (res.getString(3) == "Alkaline Phosphotase"){
                c1positif = hitungc(conn,res.getString(3),"Tinggi","Temp1");
                c1negatif = hitungcn(conn,res.getString(3),"Tinggi","Temp1");
                ctotal1 = c1positif + c1negatif;
                cmembership1 = (c1positif / ctotal1) * 100;
                cmembership2 = (c1negatif / ctotal1) * 100;
                c2positif = hitungc(conn,res.getString(3),"Normal","Temp1");
                c2negatif = hitungcn(conn,res.getString(3),"Normal","Temp1");
                ctotal2 = c2positif + c2negatif;
                cmembership3 = (c2positif / ctotal2) * 100;
                cmembership4 = (c2negatif / ctotal1) * 100;
                }
                else if (res.getString(3) == "Alkaline Phosphotase"){
                c1positif = hitungc(conn,res.getString(3),"Tinggi","Temp1");
                c1negatif = hitungcn(conn,res.getString(3),"Tinggi","Temp1");
                ctotal1 = c1positif + c1negatif;
                cmembership1 = (c1positif / ctotal1) * 100;
                cmembership2 = (c1negatif / ctotal1) * 100;
                c2positif = hitungc(conn,res.getString(3),"Normal","Temp1");
                c2negatif = hitungcn(conn,res.getString(3),"Normal","Temp1");
                ctotal2 = c2positif + c2negatif;
                cmembership3 = (c2positif / ctotal2) * 100;
                cmembership4 = (c2negatif / ctotal1) * 100;
                }else if (res.getString(3) == "Age"){
                c1positif = hitungc(conn,res.getString(3),"Anak","Temp1");
                c1negatif = hitungcn(conn,res.getString(3),"Anak","Temp1");
                ctotal1 = c1positif + c1negatif;
                cmembership1 = (c1positif / ctotal1) * 100;
                cmembership2 = (c1negatif / ctotal1) * 100;
                c2positif = hitungc(conn,res.getString(3),"Muda","Temp1");
                c2negatif = hitungcn(conn,res.getString(3),"Muda","Temp1");
                ctotal2 = c2positif + c2negatif;
                cmembership3 = (c2positif / ctotal2) * 100;
                cmembership4 = (c2negatif / ctotal1) * 100;
                c3positif = hitungc(conn,res.getString(3),"Muda","Temp1");
                c3negatif = hitungcn(conn,res.getString(3),"Muda","Temp1");
                ctotal = c2positif + c2negatif;
                cmembership5 = (c3positif / ctotal) * 100;
                cmembership6 = (c3negatif / ctotal) * 100;
                }
                Integer tetar;
                Menu2 tr = new Menu2();
                tetar = tr.tetarProses();
               
                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
                 pst2.execute();
                System.out.println(sql2);
                }else{
                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
                pst2.execute();
                System.out.println(sql2);
                }
                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
                 pst2.execute();
                System.out.println(sql2);
                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
                pst2.execute();
                System.out.println(sql2);
                }
             insertDataEntropy(i);
               }
                for (i=1;i>9;i++){
                    System.out.println("asem");
                }
                System.exit(0);
             } 
             }while (i < 9);
          }catch (Exception e) {
        }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
//     private void nodeDua(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//           insertDataTemp2();
//          val = dataMentah("Temp2");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 1' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy2();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy2();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy2();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy2();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp2");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp2");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp2");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy2();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy2();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy2();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp2");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp2");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy2();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp2");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp2");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp2");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp2");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp2");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp2");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy2();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//    private void nodeTiga(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          insertDataTemp3(); 
//          val = dataMentah("Temp3");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 2' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy3();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy3();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy3();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy3();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp3");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp3");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp3");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy3();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy3();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy3();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp3");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp3");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy3();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp3");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp3");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp3");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp3");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp3");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp3");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy3();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//     
//     private void nodeEmpat(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          insertDataTemp4(); 
//          val = dataMentah("Temp4");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 3' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy4();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy4();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy4();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy4();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp4");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp4");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp4");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy4();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy4();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy4();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp4");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp4");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy4();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp4");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp4");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp4");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp4");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp4");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp4");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy4();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//    private void nodeLima(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          insertDataTemp5(); 
//          val = dataMentah("Temp5");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 4' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy5();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy5();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy5();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy5();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp5");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp5");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp5");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy5();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy5();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy5();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp5");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp5");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy5();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp5");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp5");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp5");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp5");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp5");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp5");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy5();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//    private void nodeEnam(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          val = dataMentah("Temp7");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           insertDataTemp6(); 
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 5' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy6();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy6();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy6();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy6();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp6");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp6");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp6");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy6();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy6();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy6();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp6");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp6");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy6();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp6");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp6");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp6");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp6");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp6");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp6");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy6();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
     
//     private void nodeDelapan(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          val = dataMentah("Temp8");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           insertDataTemp8(); 
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 7' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy8();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy8();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy8();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy8();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp8");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp8");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp8");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy8();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy8();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy8();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp8");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp8");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy8();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp8");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp8");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp8");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp8");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp8");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp8");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy8();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//     private void nodeSembilan(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          val = dataMentah("Temp9");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           insertDataTemp9(); 
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 8' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//               
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy9();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy9();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy9();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy9();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp9");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp9");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp9");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy9();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy9();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy9();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp9");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp9");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy9();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp9");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp9");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp9");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp9");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp9");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp9");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy9();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//     
//     private void nodeTujuh(){
//         java.sql.Connection conn=(Connection)Koneksi.configDB();
//           Integer number,val,tetan;
//           double ctetan,ctetan1,val1;
//          number = numProses();
//          if(number == 0){
//              number = 1;
//          }
//          val = dataMentah("Temp7");
//          tetan = tetanProses();
//          ctetan = tetan/100;
//          ctetan1 = val * ctetan;
//          val1 = val / 10;
//          try {
//           insertDataTemp7(); 
//           if(val >= ctetan1){
//            String sql = "select * from result where type = 'Gain 6' and prosespenelitian= "+number+" order by `value` desc limit 1";
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           System.out.println(sql);
//            while(res.next()){
//               if(res.getString(3).contains("Alamine Aminotransferase")){
//                 String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alamine Aminotransferase,0,+','0.5',"+number+"),('Node Root','Alamine Aminotransferase,0,-','0.5',"+number+")";
//                 java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();  
//                c1positif = hitungc(conn,"Alamine Aminotransferase","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Alamine Aminotransferase","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alamine Aminotransferase","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Alamine Aminotransferase","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                    String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` =' Alamine Aminotransferase ' and label='Abnormal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                 pst2.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` =' Alamine Aminotransferase ' and label='Normal'','0.5',"+number+")";
//                 java.sql.PreparedStatement pst2=conn.prepareStatement(sql2);
//                pst2.execute();
//                System.out.println(sql2);
//                }
//             entropy7();
//            }else if (res.getString(3).contains("Aspartate Aminotransferase") ){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Aspartate Aminotransferase,0,+','0.5',"+number+"),('Node Root','Aspartate Aminotransferase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                System.out.println(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Aspartate Aminotransferase","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Aspartate Aminotransferase","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Aspartate Aminotransferase","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Aspartate Aminotransferase","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//             entropy7();
//            }else if (res.getString(3).contains("Total Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Bilirubin,0,+','0.5',"+number+"),('Node Root','Total Bilirubin,0,-','0.5',"+number+")";
//               java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Bilirubin","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Total Bilirubin","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Bilirubin","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Total Bilirubin","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Aspartate Aminotransferase' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Aspartate Aminotransferase' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//             entropy7();
//            }else if (res.getString(3).contains("Albumin and Global")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin and Global,0,+','0.5',"+number+"),('Node Root','Albumin and Global,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin and Global","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Albumin and Global","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin and Global","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Albumin and Global","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//              entropy7();
//            }else if (res.getString(3).contains("Albumin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Albumin,0,+','0.5',"+number+"),('Node Root','Albumin,0,-','0.5',"+number+"),('Node','Albumin,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Albumin","Rendah","Temp7");
//                c1negatif = hitungcn(conn,"Albumin","Rendah","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Albumin","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Albumin","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Albumin","Tinggi","Temp7");
//                c3negatif = hitungcn(conn,"Albumin","Tinggi","Temp7");
//                ctotal = c3positif + c3negatif;
//                cmembership5 = (c2positif / ctotal2) * 100;
//                cmembership6 = (c2negatif / ctotal1) * 100;
//                 Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy7();
//            }else if (res.getString(3).contains("Total Protiens")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Total Protiens,0,+','0.5',"+number+"),('Node Root','Total Protiens,0,-','0.5',"+number+"),('Node','Total Protiens,1,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Total Protiens","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Total Protiens","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Total Protiens","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Total Protiens","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Protiens' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' and `key` ='Total Protiens' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                }
//                entropy7();
//            }else if (res.getString(3).contains("Direct Bilirubin")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Direct Bilirubin,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Direct Bilirubin","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Direct Bilirubin","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Direct Bilirubin","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Direct Bilirubin","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                }else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Direct Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Direct Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy7();
//            }else if (res.getString(3).contains("Alkaline Phosphotase")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Alkaline Phosphotase,0,+','0.5',"+number+"),('Node Root','Alkaline Phosphotase,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Alkaline Phosphotase","Abnormal","Temp7");
//                c1negatif = hitungcn(conn,"Alkaline Phosphotase","Abnormal","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Alkaline Phosphotase","Normal","Temp7");
//                c2negatif = hitungcn(conn,"Alkaline Phosphotase","Normal","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if(cmembership3 > cmembership1 || cmembership4 > cmembership2){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Total Bilirubin' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Total Bilirubin' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 1',' `key` ='Albumin and Global' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi 2',' `key` ='Albumin and Global' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                entropy7();
//            } else if (res.getString(3).contains("Age")){
//                String tes = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Node Root','Age,0,+','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+"),('Node Root','Age,0,-','0.5',"+number+")";
//                java.sql.PreparedStatement pst=conn.prepareStatement(tes);
//                pst.execute();
//                c1positif = hitungc(conn,"Age","Muda","Temp7");
//                c1negatif = hitungcn(conn,"Age","Muda","Temp7");
//                ctotal1 = c1positif + c1negatif;
//                cmembership1 = (c1positif / ctotal1) * 100;
//                cmembership2 = (c1negatif / ctotal1) * 100;
//                c2positif = hitungc(conn,"Age","Dewasa","Temp7");
//                c2negatif = hitungcn(conn,"Age","Dewasa","Temp7");
//                ctotal2 = c2positif + c2negatif;
//                cmembership3 = (c2positif / ctotal2) * 100;
//                cmembership4 = (c2negatif / ctotal1) * 100;
//                c3positif = hitungc(conn,"Age","Muda","Temp7");
//                c3negatif = hitungcn(conn,"Age","Muda","Temp7");
//                ctotal = c1positif + c1negatif;
//                cmembership5 = (c3positif / ctotal) * 100;
//                cmembership6 = (c3negatif / ctotal) * 100;
//                Integer tetar;
//                Menu2 tr = new Menu2();
//                tetar = tr.tetarProses();
//                if(((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                if((cmembership3 > cmembership1) || (cmembership4 > cmembership2) || (cmembership3 > cmembership5) || (cmembership2 > cmembership6)){
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                 
//                pst1.execute();
//                }else{
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//                } else if (((tetar < cmembership3) || (tetar < cmembership4)) && ((tetar >= cmembership1) || (tetar >= cmembership2))) {
//                  String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Normal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                System.out.println(sql2);
//                } else if (((tetar >= cmembership3) || (tetar >= cmembership4)) && ((tetar < cmembership1) || (tetar < cmembership2))) {
//                 String sql2 = "Insert into result(type,keytable,`value`,prosespenelitian) values ('Prediksi',' `key` ='Age' and label='Abnormal' ','0.5',"+number+")";
//                 java.sql.PreparedStatement pst1=conn.prepareStatement(sql2);
//                pst1.execute();
//                }
//            }
//               entropy7();
//            }
//            }
//          }catch (Exception e) {
//              
//        }finally{
//            try {
//                if (conn !=null)
//                    conn.close();
//            } catch (SQLException ex) {
//                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//     }
//    
//      public void insertDataNew(Connection Conn,Integer i){
//        
//      }
      
      public void insertDataEntropy(Integer i){
          if(i==1){
              entropy1();
          }else if (i==2){
               entropy2();
          }else if (i==3){
               entropy3();
          }else if (i==4){
               entropy4();
          }else if (i==5){
               entropy5();
          }else if (i==6){
               entropy6();
          }else if (i==7){
               entropy7();
          }else if (i==8){
               entropy8();
          }else if (i==9){
               entropy9();
          }
      }
      
      public void insertDataTemp1(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 0' and prosespenelitian= "+number+" order by `value` desc limit 1";
           System.out.println(sql);
           System.exit(0);
           java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp1 (idprosesfold,`key`,category,label,`value`)"
                   + " select idprosesfold,`key`,category,label,`value` from fuzzy"
                   + " where idprosesfold in (select idprosesfold from fuzzy where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           System.out.println(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
      
      public void insertDataTemp2(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 1' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp2 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp1"
                   + " where idprosesfold in (select idprosesfold from temp1 where `key` = "+"'"+res.getString(3)+"')";;
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
      
      public void insertDataTemp3(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 2' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp3 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp2"
                   + " where idprosesfold in (select idprosesfold from temp2 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     } 
      
       public void insertDataTemp4(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 3' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp4 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp3"
                   + " where idprosesfold in (select idprosesfold from temp3 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void insertDataTemp5(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 4' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp5 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp4"
                   + " where idprosesfold in (select idprosesfold from temp4 where `key` "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
      public void insertDataTemp6(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 5' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp6 (idprosesfold,`key`,category,`value`)"
                   + " select idprosesfold,`key`,category,`value` from temp5"
                   + " where idprosesfold in (select idprosesfold from temp5 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
      
      public void insertDataTemp7(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 6' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp7 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp6"
                   + " where idprosesfold in (select idprosesfold from temp6 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
      public void insertDataTemp8(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 7' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp8 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp7"
                   + " where idprosesfold in (select idprosesfold from temp7 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
     
     public void insertDataTemp9(){
         java.sql.Connection conn=(Connection)Koneksi.configDB();
          Integer number;
          Menu2 nw = new Menu2();
          number = nw.numProses();
          if(number == 0){
              number = 1;
          }
       try{
           String sql = "select * from result where type = 'Gain 8' and prosespenelitian= "+number+" order by `value` desc limit 1";
            java.sql.Statement stm=conn.createStatement();
            java.sql.ResultSet res=stm.executeQuery(sql);
            while(res.next()){
           String sql1 = "Insert into temp9 (idprosesfold,`key`,category,`value`,label)"
                   + " select idprosesfold,`key`,category,`value`,label from temp8"
                   + " where idprosesfold in (select idprosesfold from temp8 where `key` = "+"'"+res.getString(3)+"')";
           java.sql.PreparedStatement run=conn.prepareStatement(sql1);
           run.execute();
         }
       }
       catch(Exception e){
         JOptionPane.showMessageDialog(this,e.getMessage());
       }finally{
            try {
                if (conn !=null)
                    conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuFold.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     } 
     
//     private void updatePrediksi(Connection conn,String table,String status){
//          try {
//            int num1 = 0;
//            
//            String sql = "select idprosesfold,value from fuzzy f"
//                    + "join prosesfold p on p.idprosesfold = f.idprosesfold "
//                    + "where type = 'Fuzzy' and label = 'Abnormal' and `key` = '"+table+"' and status = '"+status+"'";
//            
//            java.sql.Statement stm=conn.createStatement();
//            java.sql.ResultSet res=stm.executeQuery(sql);
//           while(res.next()){
//                if(Float.parseFloat(res.getString(2)) > 0.5f){
//                    updateData(conn,1,Integer.parseInt(res.getString(1)));
//                }else{
//                    updateData(conn,2,Integer.parseInt(res.getString(1)));
//                }
//            }
//          }catch (Exception e) {
//              
//        }
//         
//     }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuFold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuFold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuFold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuFold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
